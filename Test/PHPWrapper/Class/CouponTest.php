<?php

include_once ("PHPWrapper/autoload.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-02 at 21:41:48.
 */
class CouponTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Coupon
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        try {
            $this->object = new Coupon("sfge");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter live_id is not numeric in Coupon object Constructor.", $e->getMessage());
        }

        try {
            $this->object = new Coupon(0, null);
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter code can't be null in Coupon object Constructor.", $e->getMessage());
        }

        try {
            $this->object = new Coupon(0, "fr33", "3gte");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter value is not numeric in Coupon object Constructor.", $e->getMessage());
        }

        try {
            $this->object = new Coupon(0, "fr33", 10, "plop");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter currency can take only two value (\"EUR\" or \"USD\" )in Coupon object Constructor.", $e->getMessage());
        }

        $this->object = new Coupon(0, "fr33", 10, "USD");
        $this->object = new Coupon(0, "fr33", 10, "EUR");

        try {
            $this->object = new Coupon(0, "fr33", 10, "USD", "w3vrb");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter max is not numeric in Coupon object Constructor.", $e->getMessage());
        }

        try {
            $this->object = new Coupon(0, "fr33", 10, "USD", 10, "kmfsdt");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter type unknown in Coupon object Constructor.", $e->getMessage());
        }
        $this->object = new Coupon(0, "fr33", 10, "USD", 10, "discount-percent");
        $this->object = new Coupon(0, "fr33", 10, "USD", 10, "discount-money");
        $this->object = new Coupon(0, "fr33", 10, "USD", 10, "freepass");
        $this->object = new Coupon(0, "fr33", 10, "USD", 10, "gift");

        $this->object = new Coupon;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Coupon::get_id
     */
    public function testGet_id() {
        $this->assertEquals(0, $this->object->get_id());
    }

    /**
     * @covers Coupon::get_code
     */
    public function testGet_code() {
        $this->assertEquals("free", $this->object->get_code());
    }

    /**
     * @covers Coupon::get_value
     */
    public function testGet_value() {
        $this->assertEquals(0, $this->object->get_value());
    }

    /**
     * @covers Coupon::get_currency
     */
    public function testGet_currency() {
        $this->assertEquals("USD", $this->object->get_currency());
    }

    /**
     * @covers Coupon::get_max
     */
    public function testGet_max() {
        $this->assertEquals(0, $this->object->get_max());
    }

    /**
     * @covers Coupon::get_type
     */
    public function testGet_type() {
        $this->assertEquals("freepass", $this->object->get_type());
    }

    /**
     * @covers Coupon::get_rate_type
     */
    public function testGet_rate_type() {
        $this->assertEquals("payperview", $this->object->get_rate_type());
    }

    /**
     * @covers Coupon::get_media_type
     */
    public function testGet_media_type() {
        $this->assertEquals("", $this->object->get_media_type());
    }

    /**
     * @covers Coupon::get_media_id
     */
    public function testGet_media_id() {
        $this->assertEquals(0, $this->object->get_media_id());
    }

    /**
     * @covers Coupon::get_gift_type
     */
    public function testGet_gift_type() {
        $this->assertEquals(0, $this->object->get_gift_type());
    }

    /**
     * @covers Coupon::get_gift_id
     */
    public function testGet_gift_id() {
        $this->assertEquals(null, $this->object->get_gift_type());
    }

    /**
     * @covers Coupon::get_status
     */
    public function testGet_status() {
        $this->assertEquals(1, $this->object->get_status());
    }

    /**
     * @covers Coupon::get_user_id
     */
    public function testGet_user_id() {
        $this->assertEquals(0, $this->object->get_user_id());
    }

    /**
     * @covers Coupon::set_id
     */
    public function testSet_id() {
        try {
            $this->object->set_id("rthn567");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter id is not numeric in function set_id() in Coupon object.", $e->getMessage());
        }

        $this->object->set_id(46568);
        $this->assertEquals(46568, $this->object->get_id());
    }

    /**
     * @covers Coupon::set_code
     */
    public function testSet_code() {
        $this->object->set_code("code");
        $this->assertEquals("code", $this->object->get_code());
    }

    /**
     * @covers Coupon::set_value
     */
    public function testSet_value() {
        try {
            $this->object->set_value("298h6wg356");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter value is not numeric in function set_value() in Coupon Object.", $e->getMessage());
        }

        $this->object->set_value(10);
        $this->assertEquals(10, $this->object->get_value());
    }

    /**
     * @covers Coupon::set_currency
     */
    public function testSet_currency() {
        try {
            $this->object->set_currency("rtrg67");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter currency from function set_currency() can only take two value (\"EUR\" or \"USD\" )in Coupon object.", $e->getMessage());
        }

        $this->object->set_currency("USD");
        $this->assertEquals("USD", $this->object->get_currency());


        $this->object->set_currency("EUR");
        $this->assertEquals("EUR", $this->object->get_currency());
    }

    /**
     * @covers Coupon::set_max
     */
    public function testSet_max() {
        try {
            $this->object->set_max("298h6wg356");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter max is not numeric in function set_max() in Coupon object.", $e->getMessage());
        }

        $this->object->set_max("298356");
        $this->assertEquals(298356, $this->object->get_max());
    }

    /**
     * @covers Coupon::set_type
     * @todo   Implement testSet_type().
     */
    public function testSet_type() {

        try {
            $this->object->set_type("rtgy");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter type unknown from function set_type in Coupon object.", $e->getMessage());
        }

        $this->object->set_type("discount-percent");
        $this->assertEquals("discount-percent", $this->object->get_type());

        $this->object->set_type("discount-money");
        $this->assertEquals("discount-money", $this->object->get_type());

        $this->object->set_type("gift");
        $this->assertEquals("gift", $this->object->get_type());

        $this->object->set_type("freepass");
        $this->assertEquals("freepass", $this->object->get_type());
    }

    /**
     * @covers Coupon::set_rate_type
     */
    public function testSet_rate_type() {
        $exception = "Parameter rate_type unknown in Coupon object.";

        try {
            $this->object->set_rate_type("subvscrition");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals($exception, $e->getMessage());
        }

        try {
            $this->object->set_rate_type("subvscrit$474ion");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals($exception, $e->getMessage());
        }

        $this->object->set_rate_type("subscription");
        $this->assertEquals("subscription", $this->object->get_rate_type());
    }

    /**
     * @covers Coupon::set_media_type
     */
    public function testSet_media_type() {
        $this->object->set_media_type("channel");
        $this->assertEquals("channel", $this->object->get_media_type());
    }

    /**
     * @covers Coupon::set_media_id
     */
    public function testSet_media_id() {
        try {
            $this->object->set_media_id("gr59##^35b45bky");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter media_id is not numeric in function set_media_id() in Coupon object.", $e->getMessage());
        }
        $this->object->set_media_id(12);
        $this->assertEquals(12, $this->object->get_media_id());
    }

    /**
     * @covers Coupon::set_gift_type
     */
    public function testSet_gift_type() {
        $this->object->set_gift_type(null);
        $this->assertEquals(null, $this->object->get_gift_type());
        $this->object->set_gift_type("rtdnhdr233456$%");
        $this->assertEquals("rtdnhdr233456$%", $this->object->get_gift_type());
    }

    /**
     * @covers Coupon::set_gift_id
     */
    public function testSet_gift_id() {
        try {
            $this->object->set_media_id("gr59##^35b45bky");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter media_id is not numeric in function set_media_id() in Coupon object.", $e->getMessage());
        }
        $this->object->set_media_id(213);
        $this->assertEquals(213, $this->object->get_media_id());
    }

    /**
     * @covers Coupon::set_status
     */
    public function testSet_status() {
        try {
            $this->object->set_status("gr59##^35b45bky");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter status is not numeric in function set_status() in Coupon object.", $e->getMessage());
        }

        $this->object->set_status(42);
        $this->assertEquals(42, $this->object->get_status());
    }

    /**
     * @covers Coupon::set_user_id
     */
    public function testSet_user_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
