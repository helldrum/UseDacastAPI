<?php

include_once ("PHPWrapper/autoload.php");
define('BID', '26708');
define('API_KEY', '7c70028b237d85cda0cc');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-14 at 01:00:55.
 */
class DAOLiveTest extends PHPUnit_Framework_TestCase {

    /**
     * @var DAOLive
     */
    protected $object;
    protected $settings;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        try {
            $this->object = new DAOLive("", "");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter userSetting is not a instance of  UserAPISettings in DAOLive contructor.", $e->getMessage());
        }
        $this->settings = new UserApiSettings(BID, API_KEY);

        $this->object = new DAOLive($this->settings, new Live);
    }

    protected function tearDown() {
        
    }

    /**
     * @covers DAOLive::get_UserSettings
     */
    public function testGet_UserSettings() {
        $userSettings = new UserApiSettings("12354", API_KEY);
        $this->object->set_userSettings($userSettings);
        $this->assertSame($userSettings, $this->object->get_UserSettings());
    }

    /**
     * @covers DAOLive::get_currentObjet
     */
    public function testGet_currentObjet() {
        $live = new Live(10);
        $this->object->set_currentObjet($live);
        $this->assertSame($live, $this->object->get_currentObjet());
    }

    /**
     * @covers DAOLive::get_fullUrlCall
     */
    public function testGet_fullUrlCall() {
        $this->object->set_fullUrlCall("www.google.com");
        $this->assertEquals("www.google.com", $this->object->get_fullUrlCall());
    }

    /**
     * @covers DAOLive::set_userSettings
     */
    public function testSet_userSettings() {
        try {
            $this->object->set_userSettings("plop");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter userSettings is not a instance of  UserAPISettings in set_userSettings function in DAOLive object.", $e->getMessage());
        }
        $this->object->set_userSettings();
    }

    /**
     * @covers DAOLive::reset_tabAllRate
     * @todo   Implement testReset_tabAllRate().
     */
    public function testReset_tabAllRate() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::set_currentObjet
     * @todo   Implement testSet_currentObjet().
     */
    public function testSet_currentObjet() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::set_fullUrlCall
     * @todo   Implement testSet_fullUrlCall().
     */
    public function testSet_fullUrlCall() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getById
     * @todo   Implement testGetById().
     */
    public function testGetById() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::get_all
     * @todo   Implement testGet_all().
     */
    public function testGet_all() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::reset_tabAllLive
     */
    public function testReset_tabAllLive() {
        $tabAllLive = $this->object->get_all();
        $this->assertNotNull($tabAllLive);
        $this->object->reset_tabAllLive();
        $this->assertNull($this->object->get_tabAllLive());
    }

    /**
     * @covers DAOLive::get_tabAllLive
     */
    public function testGet_tabAllLive() {
        return $this->_tabAllLive;
    }

    /**
     * @covers DAOLive::get_tabAllRate
     */
    public function testGet_tabAllRate() {
        unset($this->_tabAllRate);
    }

    /**
     * @covers DAOLive::deleteById
     * @todo   Implement testDeleteById().
     */
    public function testDeleteById() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::create
     * @todo   Implement testCreate().
     */
    public function testCreate() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getEmbedCode
     * @todo   Implement testGetEmbedCode().
     */
    public function testGetEmbedCode() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::createRateById
     * @todo   Implement testCreateRateById().
     */
    public function testCreateRateById() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getRatebyId
     * @todo   Implement testGetRatebyId().
     */
    public function testGetRatebyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getAllRatebyId
     * @todo   Implement testGetAllRatebyId().
     */
    public function testGetAllRatebyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::deleteRatebyId
     * @todo   Implement testDeleteRatebyId().
     */
    public function testDeleteRatebyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getCouponbyId
     * @todo   Implement testGetCouponbyId().
     */
    public function testGetCouponbyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::createCouponById
     * @todo   Implement testCreateCouponById().
     */
    public function testCreateCouponById() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::deleteCouponbyId
     * @todo   Implement testDeleteCouponbyId().
     */
    public function testDeleteCouponbyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers DAOLive::getAllCouponbyId
     * @todo   Implement testGetAllCouponbyId().
     */
    public function testGetAllCouponbyId() {
// Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
