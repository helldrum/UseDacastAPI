<?php

include_once ("PHPWrapper/autoload.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-02 at 21:41:46.
 */
class APICallTest extends PHPUnit_Framework_TestCase {

    /**
     * @var APICall
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

//get live 43364 from user 26708
        $this->object = new APICall(API_KEY, BID, "https://www.dacast.com/backend/api/live/43364?bid=26708&apikey=7c70028b237d85cda0cc");

        try {
            $this->object = new APICall(null, BID, "url");
        } catch (Exception $e) {
            $this->assertEquals("APIKey miss initialized in APICall contructor.", $e->getMessage());
        }

        try {
            $this->object = new APICall("apykey6o5gkk457", null, "url");
        } catch (Exception $e) {
            $this->assertEquals("Broadcaster_id miss initialized in APICall contructor.", $e->getMessage());
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers APICall::getApiKey
     * @todo   Implement testGetApiKey().
     */
    public function testGetApiKey() {
        $this->assertEquals(API_KEY, $this->object->getApiKey());
    }

    /**
     * @covers APICall::getBroadcasterId
     * @todo   Implement testGetBroadcasterId().
     */
    public function testGetBroadcasterId() {
        $this->assertEquals(BID, $this->object->getBroadcasterId());
    }

    /**
     * @covers APICall::getAction
     * @todo   Implement testGetAction().
     */
    public function testGetAction() {

        $this->assertEquals("", $this->object->getAction());
    }

    /**
     * @covers APICall::getUrl
     * @todo   Implement testGetUrl().
     */
    public function testGetUrl() {
        $this->assertEquals("https://www.dacast.com/backend/api/live/43364?bid=26708&apikey=7c70028b237d85cda0cc", $this->object->getUrl());
    }

    /**
     * @covers APICall::setJsonDecoded
     * @todo   Implement testSetJsonDecoded().
     */
    public function testSetJsonDecoded() {
        $this->object->setJsonDecoded(null);
        $this->assertNull($this->object->getJsonDecoded());

        $this->object->setJsonDecoded('{"id": 1,"name": "A green door","price": 12.50,"tags": ["home", "green"]}');
        $this->assertEquals('{"id": 1,"name": "A green door","price": 12.50,"tags": ["home", "green"]}', $this->object->getJsonDecoded());
    }

    /**
     * @covers APICall::getJsonDecoded
     * @todo   Implement testGetJsonDecoded().
     */
    public function testGetJsonDecoded() {
        $this->object->setJsonDecoded(null);
        $this->assertNull($this->object->getJsonDecoded());

        $this->object->setJsonDecoded('{"id": 1,"name": "A green door","price": 12.50,"tags": ["home", "green"]}');
        $this->assertEquals('{"id": 1,"name": "A green door","price": 12.50,"tags": ["home", "green"]}', $this->object->getJsonDecoded());
    }

    /**
     * @covers APICall::ApiRequest
     * @todo   Implement testApiRequest().
     */
    public function testApiRequest() {
        try {

            $this->object->ApiRequest("jntgi", "http://www.trololo.com");
        } catch (Exception $e) {
            $this->assertEquals("Wrong value for the setAction() function (can be POST,DELETE or GET).", $e->getMessage());
        }
        //wrong url but good action
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequest("GET", "http://www.myurlfake6565.com");
        $this->assertNull($this->object->getJsonDecoded());


        // good action, good URL need to return Array with data
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequest("GET", "https://www.dacast.com/backend/api/live/43364?bid=26708&apikey=7c70028b237d85cda0cc");
        $this->assertArrayHasKey("live", $this->object->getJsonDecoded());

        //wrong API key, return array with error message
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequest("GET", "https://www.dacast.com/backend/api/live/43364?bid=26708&apikey=7c70028b237d85cda0c");
        $this->assertArrayHasKey("error", $this->object->getJsonDecoded());
    }

    /**
     * @covers APICall::ApiRequestWithRawData
     * @todo   Implement testApiRequestWithRawData().
     */
    public function testApiRequestWithRawData() {
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequestWithRawData("https://www.dacast.com/backend/api/live/43364/embed/frame?bid=26708&apikey=7c70028b237d85cda0cc");
        $this->assertNotNull($this->object->getJsonDecoded());

        //wrong API key, return array with error message
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequestWithRawData("https://www.dacast.com/backend/api/live/43364?bid=26708&apikey=7c70028b237d85cda0c");
        var_dump($this->object->getJsonDecoded());
        //$this->assertArrayHasKey("error", $this->object->getJsonDecoded());

           //wrong URL
        $this->object->setJsonDecoded(null);
        $this->object->ApiRequestWithRawData("http://www.myurlfake6565.com");
        $this->assertFalse($this->object->getJsonDecoded());
    }

    /**
     * @covers APICall::setApiKey
     * @todo   Implement testSetApiKey().
     */
    public function testSetApiKey() {
        try {

            $this->object->setApiKey(null);
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter APIKey can't be null for the setApiKey() function.", $e->getMessage());
        }

        $this->object->setApiKey("grknve9587");
        $this->assertEquals("grknve9587", $this->object->getApiKey());
    }

    /**
     * @covers APICall::setBroadcasterId
     * @todo   Implement testSetBroadcasterId().
     */
    public function testSetBroadcasterId() {
        $this->object->setBroadcasterId("358635");
        $this->assertEquals("358635", $this->object->getBroadcasterId());


        try {
            $this->object->setBroadcasterId(null);
        } catch (Exception $e) {
            $this->assertEquals("Broadcaster_id parameter can't be null for the setBroadcasterId() function.", $e->getMessage());
        }

        try {
            $this->object->setBroadcasterId("48g4h67");
        } catch (Exception $e) {
            $this->assertEquals("Broadcaster_id parameter is not numeric for the setBroadcasterId() function.", $e->getMessage());
        }
    }

    /**
     * @covers APICall::setAction
     * @todo   Implement testSetAction().
     */
    public function testSetAction() {
        $this->object->setAction("POST");

        $this->assertEquals("POST", $this->object->getAction("POST"));
        $this->assertEquals("POST", $this->object->getAction("DELETE"));
        $this->assertEquals("POST", $this->object->getAction("GET"));

        try {

            $this->object->setAction("jntgi");
        } catch (Exception $e) {
            $this->assertEquals("Wrong value for the setAction() function (can be POST,DELETE or GET).", $e->getMessage());
        }

        try {

            $this->object->setAction(null);
        } catch (Exception $e) {
            $this->assertEquals("Action parameter can't be null for the setAction() function.", $e->getMessage());
        }
    }

    /**
     * @covers APICall::setUrl
     * @todo   Implement testSetUrl().
     */
    public function testSetUrl() {
        $this->object->setUrl("https://www.dacast.com");
        $this->assertEquals("https://www.dacast.com", $this->object->getUrl());
    }

}
