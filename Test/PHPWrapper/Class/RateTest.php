<?php

include_once ("PHPWrapper/autoload.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-02 at 21:41:48.
 */
class RateTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Rate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {

        try {
            $this->object = new Rate("sbrdgyt");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter live_id is not numeric in Rate object Constructor.", $e->getMessage());
        }

        try {
            $this->object = new Rate(0, "sbrdgyt");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter type unknown in Rate object Constructor.", $e->getMessage());
        }
        $this->object = new Rate(0, "payperview");
        $this->object = new Rate(0, "subscription");

        try {
            $this->object = new Rate(0, "payperview", "gwy3");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter price is not numeric in Rate object Constructor.", $e->getMessage());
        }
        $this->object = new Rate(0, "payperview", 10);

        try {
            $this->object = new Rate(0, "payperview", 10, "Ufh8h");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter currency can take only two value (\"EUR\" or \"USD\" )in Rate object Constructor.", $e->getMessage());
        }
        $this->object = new Rate(0, "payperview", 10, "USD");
        $this->object = new Rate(0, "payperview", 10, "EUR");


        try {
            $this->object = new Rate(0, "payperview", 10, "USD", "DGTFy");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter time_quantity is not numeric in Rate object Constructor.", $e->getMessage());
        }

        $this->object = new Rate(0, "payperview", 10, "USD", 123);

        try {
            $this->object = new Rate(0, "payperview", 10, "USD", 12, "mgdd");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter time_unit unknown in Rate object Constructor.", $e->getMessage());
        }

        $this->object = new Rate(0, "payperview", 10, "USD", 12, "min");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "hour");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "day");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "weekly");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "monthly");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "quarterly");
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "biannual");


        $exceptionmulti = "Parameter multiply_by_quantity can take only two value (0 default or 1)in Rate object Constructor.";
        try {
            $this->object = new Rate(0, "payperview", 10, "USD", 12, "min", "hybhb");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals($exceptionmulti, $e->getMessage());
        }

        try {
            $this->object = new Rate(0, "payperview", 10, "USD", 12, "min", 42);
        } catch (InvalidArgumentException $e) {
            $this->assertEquals($exceptionmulti, $e->getMessage());
        }
        $this->object = new Rate(0, "payperview", 10, "USD", 12, "min", 0);


        $this->object = new Rate();
    }

    protected function tearDown() {
        
    }

    /**
     * @covers Rate::get_id
     */
    public function testGet_id() {
        $this->assertEquals(0, $this->object->get_id());
    }

    /**
     * @covers Rate::get_type
     */
    public function testGet_type() {
        $this->assertEquals("payperview", $this->object->get_type());
    }

    /**
     * @covers Rate::get_price
     */
    public function testGet_price() {
        $this->assertEquals(0, $this->object->get_price());
    }

    /**
     * @covers Rate::get_beginDate
     */
    public function testGet_beginDate() {
        $this->object->set_beginDate("2014-04-30 23:51:40");
        $this->assertEquals("2014-04-30 23:51:40", $this->object->get_beginDate());
    }

    /**
     * @covers Rate::get_endDate
     */
    public function testGet_endDate() {
        $this->object->set_endDate("2014-04-22 13:21:30");
        $this->assertEquals("2014-04-22 13:21:30", $this->object->get_endDate());
    }

    /**
     * @covers Rate::get_recurrence
     */
    public function testGet_recurrence() {
        $this->object->set_recurrence("plop");
        $this->assertEquals("plop", $this->object->get_recurrence());
    }

    /**
     * @covers Rate::get_currency
     */
    public function testGet_currency() {
        $this->object->set_currency("EUR");
        $this->assertEquals("EUR", $this->object->get_currency());
    }

    /**
     * @covers Rate::get_active
     */
    public function testGet_active() {
        $this->object->set_active(0);
        $this->assertEquals(0, $this->object->get_active());
    }

    /**
     * @covers Rate::get_channel_id
     */
    public function testGet_channel_id() {
        $this->object->set_channel_id(1);
        $this->assertEquals(1, $this->object->get_channel_id());
    }

    /**
     * @covers Rate::get_channels_package_id
     */
    public function testGet_channels_package_id() {
        $this->object->set_channels_package_id(1);
        $this->assertEquals(1, $this->object->get_channels_package_id());
    }

    /**
     * @covers Rate::get_time_quantity
     */
    public function testGet_time_quantity() {
        $this->object->set_time_quantity(1);
        $this->assertEquals(1, $this->object->get_time_quantity());
    }

    /**
     * @covers Rate::get_time_unit
     */
    public function testGet_time_unit() {
        $this->object->set_time_unit("min");
        $this->assertEquals("min", $this->object->get_time_unit());
    }

    /**
     * @covers Rate::get_multiply_by_quantity
     */
    public function testGet_multiply_by_quantity() {
        $this->object->set_multiply_by_quantity(0);
        $this->assertEquals(0, $this->object->get_multiply_by_quantity());
        $this->object->set_multiply_by_quantity(2);
        $this->assertEquals(2, $this->object->get_multiply_by_quantity());
    }

    /**
     * @covers Rate::get_start_method
     */
    public function testGet_start_method() {
        $this->assertEquals(null, $this->object->get_start_method());
    }

    /**
     * @covers Rate::set_id
     */
    public function testSet_id() {
        try {
            $this->object->set_id("hdgjdiv");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter id is not numeric in set_id() function in Rate object.", $e->getMessage());
        }
        $this->assertEquals(null, $this->object->get_id());

        $this->object->set_id("15364");
        $this->assertEquals(15364, $this->object->get_id());
    }

    /**
     * @covers Rate::set_type
     */
    public function testSet_type() {
        try {
            $this->object->set_type("sbrdgyt");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter type unknown in set_type() function in Rate object.", $e->getMessage());
        }
        $this->object->set_type("payperview");
        $this->assertEquals("payperview", $this->object->get_type());
        $this->object->set_type("subscription");
        $this->assertEquals("subscription", $this->object->get_type());
    }

    /**
     * @covers Rate::set_price
     */
    public function testSet_price() {
        try {
            $this->object->set_price(20);
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter price is not numeric in  set_price() function in Rate object.", $e->getMessage());
        }
        $this->object = new Rate(0, "payperview", 10);
    }

    /**
     * @covers Rate::set_beginDate
     * @todo   Implement testSet_beginDate().
     */
    public function testSet_beginDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::set_endDate
     * @todo   Implement testSet_endDate().
     */
    public function testSet_endDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::set_recurrence
     */
    public function testSet_recurrence() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::set_currency
     */
    public function testSet_currency() {
        try {
            $this->object->set_currency("dgdhgfj");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter currency can take only two value (\"EUR\" or \"USD\")in set_currency() function in Rate object.", $e->getMessage());
        }
        $this->object->set_currency("EUR");
        $this->object->set_currency("USD");
    }

    /**
     * @covers Rate::set_active
     */
    public function testSet_active() {
        try {
            $this->object->set_active("whef");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter active can take only two value (0 or 1)in set_active() function in Rate object.", $e->getMessage());
        }
    }

    /**
     * @covers Rate::set_channel_id
     */
    public function testSet_channel_id() {
        try {
            $this->object->set_channel_id("whef");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter channel_id is not numeric in  set_channel_id() function in Rate object.", $e->getMessage());
        }
        $this->object->set_channel_id(12);
        $this->assertEquals(12, $this->object->get_channel_id());
    }

    /**
     * @covers Rate::set_channels_package_id
     */
    public function testSet_channels_package_id() {
        try {
            $this->object->set_channels_package_id("whef");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter channels_package_id is not numeric in set_channels_package_id() function in Rate object.", $e->getMessage());
        }
        $this->object->set_channel_id(12);
        $this->assertEquals(12, $this->object->get_channel_id());
    }

    /**
     * @covers Rate::set_time_quantity
     */
    public function testSet_time_quantity() {
        try {
            $this->object->set_time_quantity("terge");
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter time_quantity is not numeric in set_time_quantity() function in Rate object.", $e->getMessage());
        }
        $this->object->set_time_quantity(12);
        $this->assertEquals(12, $this->object->get_time_quantity());
    }

    /**
     * @covers Rate::set_time_unit
     */
    public function testSet_time_unit() {
        $this->object->set_time_unit("min");
        $this->assertEquals("min", $this->object->get_time_unit());

        $this->object->set_time_unit("hour");
        $this->assertEquals("hour", $this->object->get_time_unit());

        $this->object->set_time_unit("day");
        $this->assertEquals("day", $this->object->get_time_unit());

        $this->object->set_time_unit("min");
        $this->assertEquals("min", $this->object->get_time_unit());

        $this->object->set_time_unit("weekly");
        $this->assertEquals("weekly", $this->object->get_time_unit());

        $this->object->set_time_unit("monthly");
        $this->assertEquals("monthly", $this->object->get_time_unit());

        $this->object->set_time_unit("quarterly");
        $this->assertEquals("quarterly", $this->object->get_time_unit());

        $this->object->set_time_unit("biannual");
        $this->assertEquals("biannual", $this->object->get_time_unit());
    }

    /**
     * @covers Rate::get_start_time
     * @todo   Implement testGet_start_time
     */
    public function testGet_start_time() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::set_start_time
     * @todo   Implement testSet_start_time().
     */
    public function testSet_start_time() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::set_multiply_by_quantity
     */
    public function testSet_multiply_by_quantity() {
        try {
            $this->object->set_multiply_by_quantity("gbhc");
            $this->object->set_multiply_by_quantity(34);
        } catch (InvalidArgumentException $e) {
            $this->assertEquals("Parameter multiply_by_quantity in function set_multiply_by_quantity() can only take two value (0 default or 1)in Rate object Constructor.", $e->getMessage());
        }
    }

    /**
     * @covers Rate::set_start_method
     * @todo   Implement testSet_start_method().
     */
    public function testSet_start_method() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Rate::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
